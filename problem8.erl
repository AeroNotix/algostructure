-module(problem8).
-export([calculate/0]).
-define(INSTRING, instring()).
-define(LENSTR, length(?INSTRING)).

instring() -> 
    string:join(["73167176531330624919225119674426574742355349194934",
                 "96983520312774506326239578318016984801869478851843",
                 "85861560789112949495459501737958331952853208805511",
                 "12540698747158523863050715693290963295227443043557",
                 "66896648950445244523161731856403098711121722383113",
                 "62229893423380308135336276614282806444486645238749",
                 "30358907296290491560440772390713810515859307960866",
                 "70172427121883998797908792274921901699720888093776",
                 "65727333001053367881220235421809751254540594752243",
                 "52584907711670556013604839586446706324415722155397",
                 "53697817977846174064955149290862569321978468622482",
                 "83972241375657056057490261407972968652414535100474",
                 "82166370484403199890008895243450658541227588666881",
                 "16427171479924442928230863465674813919123162824586",
                 "17866458359124566529476545682848912883142607690042",
                 "24219022671055626321111109370544217506941658960408",
                 "07198403850962455444362981230987879927244284909188",
                 "84580156166097919133875499200524063689912560717606",
                 "05886116467109405077541002256983155200055935729725",
                 "71636269561882670428252483600823257530420752963450"
                ], "").

num_to_chr(48) -> 0;
num_to_chr(49) -> 1;
num_to_chr(50) -> 2;
num_to_chr(51) -> 3;
num_to_chr(52) -> 4;
num_to_chr(53) -> 5;
num_to_chr(54) -> 6;
num_to_chr(55) -> 7;
num_to_chr(56) -> 8;
num_to_chr(57) -> 9.

index(Strinput, N) ->
    Valid = if_valid_index(Strinput, N),
    if 
        Valid =:= true ->
            num_to_chr(lists:nth(N+1, Strinput));
        Valid =:= false ->
            1
    end.

if_valid_index(Strinput, N) ->
    Len = length(Strinput),
    if
        Len > N ->
            true;
        Len =< N ->
            false
    end.

calculate() ->
    T1 = erlang:now(),
    calculate(0, ?LENSTR, 0),
    timer:now_diff(erlang:now(), T1).

calculate(_N, _N, Sum) ->
    Sum;
calculate(M, N, Sum) ->
    Str = ?INSTRING,
    NewSum = (index(Str, M) *
              index(Str, M + 1) *
              index(Str, M + 2) *
              index(Str, M + 3) *
              index(Str, M + 4)),
    if
        NewSum > Sum ->
            calculate(M+1, N, NewSum);
        Sum > NewSum ->
            calculate(M+1, N, Sum);
        true ->
            calculate(M+1, N, Sum)
    end.
